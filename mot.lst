CCS PCM C Compiler, Version 5.015, 5967               01-Aug-25 21:55

               Filename:   D:\VXL_code\code led\mot.lst

               ROM used:   450 words (5%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           16 (4%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   16A
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
*
0026:  MOVF   29,W
0027:  CLRF   78
0028:  SUBWF  28,W
0029:  BTFSC  03.0
002A:  GOTO   02E
002B:  MOVF   28,W
002C:  MOVWF  77
002D:  GOTO   03A
002E:  CLRF   77
002F:  MOVLW  08
0030:  MOVWF  2A
0031:  RLF    28,F
0032:  RLF    77,F
0033:  MOVF   29,W
0034:  SUBWF  77,W
0035:  BTFSC  03.0
0036:  MOVWF  77
0037:  RLF    78,F
0038:  DECFSZ 2A,F
0039:  GOTO   031
003A:  RETURN
....................  
.................... #list 
....................  
.................... #fuses intrc_io 
.................... #use delay (clock=8Mhz) 
*
0012:  MOVLW  26
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   025
0018:  MOVLW  02
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  97
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 00,F
0024:  GOTO   018
0025:  RETURN
.................... #define up pin_e0 
.................... #define down pin_e1 
.................... unsigned int8 n, led; 
.................... signed int8 dem=1; 
.................... const unsigned int8 m7d[10]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90}; 
.................... unsigned char don_vi, chuc; 
....................  
.................... void tvm7d(dem); 
.................... void nutnhan() 
....................     { 
....................        if (input(up)==0) 
*
0073:  BSF    03.5
0074:  BSF    09.0
0075:  BCF    03.5
0076:  BTFSC  09.0
0077:  GOTO   091
....................          { 
....................           delay_ms(2); 
0078:  MOVLW  02
0079:  MOVWF  26
007A:  CALL   012
....................            if (input(up)==0) 
007B:  BSF    03.5
007C:  BSF    09.0
007D:  BCF    03.5
007E:  BTFSC  09.0
007F:  GOTO   091
....................              { 
....................                dem++; 
0080:  INCF   22,F
....................                if (dem>6) dem=1; 
0081:  BTFSC  22.7
0082:  GOTO   089
0083:  MOVF   22,W
0084:  SUBLW  06
0085:  BTFSC  03.0
0086:  GOTO   089
0087:  MOVLW  01
0088:  MOVWF  22
....................                 while (input(up)==0); 
0089:  BSF    03.5
008A:  BSF    09.0
008B:  BCF    03.5
008C:  BTFSS  09.0
008D:  GOTO   089
....................                  tvm7d(dem); 
008E:  MOVF   22,W
008F:  MOVWF  26
0090:  CALL   03B
....................              } 
....................              
....................               
....................          } 
....................           
....................          if (input(down)==0) 
0091:  BSF    03.5
0092:  BSF    09.1
0093:  BCF    03.5
0094:  BTFSC  09.1
0095:  GOTO   0AF
....................          { 
....................            delay_ms(2); 
0096:  MOVLW  02
0097:  MOVWF  26
0098:  CALL   012
....................            if (input(down)==0) 
0099:  BSF    03.5
009A:  BSF    09.1
009B:  BCF    03.5
009C:  BTFSC  09.1
009D:  GOTO   0AF
....................            { 
....................              dem--; 
009E:  DECF   22,F
....................              if (dem<1) dem=6; 
009F:  BTFSC  22.7
00A0:  GOTO   0A5
00A1:  MOVF   22,W
00A2:  SUBLW  00
00A3:  BTFSS  03.0
00A4:  GOTO   0A7
00A5:  MOVLW  06
00A6:  MOVWF  22
....................               while (input(down)==0); 
00A7:  BSF    03.5
00A8:  BSF    09.1
00A9:  BCF    03.5
00AA:  BTFSS  09.1
00AB:  GOTO   0A7
....................                 tvm7d(dem); 
00AC:  MOVF   22,W
00AD:  MOVWF  26
00AE:  CALL   03B
....................            } 
....................          } 
00AF:  RETURN
....................     } 
....................      
....................      
.................... void tvm7d(unsigned int8 dem) // xuat tin hieu ra led 7 doan va xoa so 0 vo nghia  
....................     { 
....................        don_vi = output_b(m7d[dem%10]); 
*
003B:  MOVF   26,W
003C:  MOVWF  28
003D:  MOVLW  0A
003E:  MOVWF  29
003F:  CALL   026
0040:  MOVF   77,W
0041:  CALL   004
0042:  MOVWF  27
0043:  BSF    03.5
0044:  CLRF   06
0045:  BCF    03.5
0046:  MOVF   27,W
0047:  MOVWF  06
0048:  MOVWF  23
....................        chuc   = output_d(m7d[dem/10%10]); 
0049:  MOVF   26,W
004A:  MOVWF  28
004B:  MOVLW  0A
004C:  MOVWF  29
004D:  CALL   026
004E:  MOVF   78,W
004F:  MOVWF  28
0050:  MOVLW  0A
0051:  MOVWF  29
0052:  CALL   026
0053:  MOVF   77,W
0054:  CALL   004
0055:  MOVWF  27
0056:  BSF    03.5
0057:  CLRF   08
0058:  BCF    03.5
0059:  MOVF   27,W
005A:  MOVWF  08
005B:  MOVWF  24
....................        if (chuc == 0xc0) 
005C:  MOVF   24,W
005D:  SUBLW  C0
005E:  BTFSS  03.2
005F:  GOTO   068
....................          { 
....................            chuc = 0xff; 
0060:  MOVLW  FF
0061:  MOVWF  24
....................            if (don_vi == 0xc0) 
0062:  MOVF   23,W
0063:  SUBLW  C0
0064:  BTFSS  03.2
0065:  GOTO   068
....................            { 
....................               don_vi=0xff; 
0066:  MOVLW  FF
0067:  MOVWF  23
....................            } 
....................          } 
....................          output_b(don_vi); 
0068:  BSF    03.5
0069:  CLRF   06
006A:  BCF    03.5
006B:  MOVF   23,W
006C:  MOVWF  06
....................          output_d(chuc); 
006D:  BSF    03.5
006E:  CLRF   08
006F:  BCF    03.5
0070:  MOVF   24,W
0071:  MOVWF  08
0072:  RETURN
....................     } 
....................      
....................      
.................... void dichphai() 
....................     { 
....................        for (n=0; n<8; n++) 
*
00B0:  CLRF   20
00B1:  MOVF   20,W
00B2:  SUBLW  07
00B3:  BTFSS  03.0
00B4:  GOTO   0CC
....................        { 
....................           led=0x80>>n; 
00B5:  MOVLW  80
00B6:  MOVWF  21
00B7:  MOVF   20,W
00B8:  MOVWF  78
00B9:  BTFSC  03.2
00BA:  GOTO   0BF
00BB:  BCF    03.0
00BC:  RRF    21,F
00BD:  DECFSZ 78,F
00BE:  GOTO   0BB
....................           output_c(led); 
00BF:  MOVLW  00
00C0:  MOVWF  25
00C1:  BSF    03.5
00C2:  CLRF   07
00C3:  BCF    03.5
00C4:  MOVF   21,W
00C5:  MOVWF  07
....................           delay_ms(200); 
00C6:  MOVLW  C8
00C7:  MOVWF  26
00C8:  CALL   012
....................           nutnhan(); 
00C9:  CALL   073
00CA:  INCF   20,F
00CB:  GOTO   0B1
....................        } 
00CC:  BCF    0A.3
00CD:  BCF    0A.4
00CE:  GOTO   1AC (RETURN)
....................     } 
....................      
.................... void dichtrai() 
....................     {  
....................       for (n=0; n<8; n++) 
00CF:  CLRF   20
00D0:  MOVF   20,W
00D1:  SUBLW  07
00D2:  BTFSS  03.0
00D3:  GOTO   0EB
....................       { 
....................         led=0x01<<n; 
00D4:  MOVLW  01
00D5:  MOVWF  21
00D6:  MOVF   20,W
00D7:  MOVWF  78
00D8:  BTFSC  03.2
00D9:  GOTO   0DE
00DA:  BCF    03.0
00DB:  RLF    21,F
00DC:  DECFSZ 78,F
00DD:  GOTO   0DA
....................         output_c(led); 
00DE:  MOVLW  00
00DF:  MOVWF  25
00E0:  BSF    03.5
00E1:  CLRF   07
00E2:  BCF    03.5
00E3:  MOVF   21,W
00E4:  MOVWF  07
....................         delay_ms(200); 
00E5:  MOVLW  C8
00E6:  MOVWF  26
00E7:  CALL   012
....................         nutnhan(); 
00E8:  CALL   073
00E9:  INCF   20,F
00EA:  GOTO   0D0
....................       } 
00EB:  BCF    0A.3
00EC:  BCF    0A.4
00ED:  GOTO   1B0 (RETURN)
....................     } 
....................  
.................... void dich2phai() 
....................     { 
....................        for (n=0; n<8; n++) 
00EE:  CLRF   20
00EF:  MOVF   20,W
00F0:  SUBLW  07
00F1:  BTFSS  03.0
00F2:  GOTO   10A
....................        { 
....................           led=0xC0>>n; 
00F3:  MOVLW  C0
00F4:  MOVWF  21
00F5:  MOVF   20,W
00F6:  MOVWF  78
00F7:  BTFSC  03.2
00F8:  GOTO   0FD
00F9:  BCF    03.0
00FA:  RRF    21,F
00FB:  DECFSZ 78,F
00FC:  GOTO   0F9
....................           output_c(led); 
00FD:  MOVLW  00
00FE:  MOVWF  25
00FF:  BSF    03.5
0100:  CLRF   07
0101:  BCF    03.5
0102:  MOVF   21,W
0103:  MOVWF  07
....................           delay_ms(200); 
0104:  MOVLW  C8
0105:  MOVWF  26
0106:  CALL   012
....................           nutnhan(); 
0107:  CALL   073
0108:  INCF   20,F
0109:  GOTO   0EF
....................        } 
010A:  BCF    0A.3
010B:  BCF    0A.4
010C:  GOTO   1B4 (RETURN)
....................     } 
....................      
.................... void dich2trai() 
....................     {  
....................       for (n=0; n<8; n++) 
010D:  CLRF   20
010E:  MOVF   20,W
010F:  SUBLW  07
0110:  BTFSS  03.0
0111:  GOTO   129
....................       { 
....................         led=0x03<<n; 
0112:  MOVLW  03
0113:  MOVWF  21
0114:  MOVF   20,W
0115:  MOVWF  78
0116:  BTFSC  03.2
0117:  GOTO   11C
0118:  BCF    03.0
0119:  RLF    21,F
011A:  DECFSZ 78,F
011B:  GOTO   118
....................         output_c(led); 
011C:  MOVLW  00
011D:  MOVWF  25
011E:  BSF    03.5
011F:  CLRF   07
0120:  BCF    03.5
0121:  MOVF   21,W
0122:  MOVWF  07
....................         delay_ms(200); 
0123:  MOVLW  C8
0124:  MOVWF  26
0125:  CALL   012
....................         nutnhan(); 
0126:  CALL   073
0127:  INCF   20,F
0128:  GOTO   10E
....................       } 
0129:  BCF    0A.3
012A:  BCF    0A.4
012B:  GOTO   1B8 (RETURN)
....................     } 
....................  
.................... void tatdanphai() 
....................    { 
....................       for (n=0; n<8; n++) 
012C:  CLRF   20
012D:  MOVF   20,W
012E:  SUBLW  07
012F:  BTFSS  03.0
0130:  GOTO   148
....................          { 
....................            led=0xff>>n; 
0131:  MOVLW  FF
0132:  MOVWF  21
0133:  MOVF   20,W
0134:  MOVWF  78
0135:  BTFSC  03.2
0136:  GOTO   13B
0137:  BCF    03.0
0138:  RRF    21,F
0139:  DECFSZ 78,F
013A:  GOTO   137
....................            output_c(led); 
013B:  MOVLW  00
013C:  MOVWF  25
013D:  BSF    03.5
013E:  CLRF   07
013F:  BCF    03.5
0140:  MOVF   21,W
0141:  MOVWF  07
....................            delay_ms(200); 
0142:  MOVLW  C8
0143:  MOVWF  26
0144:  CALL   012
....................            nutnhan(); 
0145:  CALL   073
0146:  INCF   20,F
0147:  GOTO   12D
....................          } 
0148:  BCF    0A.3
0149:  BCF    0A.4
014A:  GOTO   1BC (RETURN)
....................    } 
....................     
.................... void tatdantrai() 
....................    { 
....................       for (n=0; n<8; n++) 
014B:  CLRF   20
014C:  MOVF   20,W
014D:  SUBLW  07
014E:  BTFSS  03.0
014F:  GOTO   167
....................          { 
....................            led=0xff<<n; 
0150:  MOVLW  FF
0151:  MOVWF  21
0152:  MOVF   20,W
0153:  MOVWF  78
0154:  BTFSC  03.2
0155:  GOTO   15A
0156:  BCF    03.0
0157:  RLF    21,F
0158:  DECFSZ 78,F
0159:  GOTO   156
....................            output_c(led); 
015A:  MOVLW  00
015B:  MOVWF  25
015C:  BSF    03.5
015D:  CLRF   07
015E:  BCF    03.5
015F:  MOVF   21,W
0160:  MOVWF  07
....................            delay_ms(200); 
0161:  MOVLW  C8
0162:  MOVWF  26
0163:  CALL   012
....................            nutnhan(); 
0164:  CALL   073
0165:  INCF   20,F
0166:  GOTO   14C
....................          } 
0167:  BCF    0A.3
0168:  BCF    0A.4
0169:  GOTO   1C0 (RETURN)
....................    } 
....................  
....................  
.................... void main () 
016A:  MOVF   03,W
016B:  ANDLW  1F
016C:  MOVWF  03
016D:  MOVLW  71
016E:  BSF    03.5
016F:  MOVWF  0F
0170:  MOVF   0F,W
0171:  MOVLW  01
0172:  BCF    03.5
0173:  MOVWF  22
0174:  MOVLW  FF
0175:  MOVWF  25
0176:  BSF    03.5
0177:  BSF    03.6
0178:  MOVF   09,W
0179:  ANDLW  C0
017A:  MOVWF  09
017B:  BCF    03.6
017C:  BCF    1F.4
017D:  BCF    1F.5
017E:  MOVLW  00
017F:  BSF    03.6
0180:  MOVWF  08
0181:  BCF    03.5
0182:  CLRF   07
0183:  CLRF   08
0184:  CLRF   09
0185:  BCF    03.7
....................     { 
....................        set_tris_c(0);   
0186:  MOVLW  00
0187:  BSF    03.5
0188:  BCF    03.6
0189:  MOVWF  07
018A:  BCF    03.5
018B:  MOVWF  25
....................        set_tris_b(0); 
018C:  BSF    03.5
018D:  MOVWF  06
....................        set_tris_d(0); 
018E:  MOVWF  08
....................        set_tris_e(0xff); 
018F:  BSF    09.0
0190:  BSF    09.1
0191:  BSF    09.2
0192:  BSF    09.3
....................         
....................        output_c(0);    // khi mo nguon thi se chp tat 200ms de bao hieu mach hoat dong  
0193:  BCF    03.5
0194:  MOVWF  25
0195:  BSF    03.5
0196:  CLRF   07
0197:  BCF    03.5
0198:  CLRF   07
....................        delay_ms(200); 
0199:  MOVLW  C8
019A:  MOVWF  26
019B:  CALL   012
....................        output_c(0xff); 
019C:  MOVLW  00
019D:  MOVWF  25
019E:  BSF    03.5
019F:  CLRF   07
01A0:  MOVLW  FF
01A1:  BCF    03.5
01A2:  MOVWF  07
....................        delay_ms(200); 
01A3:  MOVLW  C8
01A4:  MOVWF  26
01A5:  CALL   012
....................        tvm7d(dem); 
01A6:  MOVF   22,W
01A7:  MOVWF  26
01A8:  CALL   03B
....................       
....................         
....................         
....................        while (true) 
....................        { 
....................          if (dem==1) dichphai(); 
01A9:  DECFSZ 22,W
01AA:  GOTO   1AC
01AB:  GOTO   0B0
....................          if (dem==2) dichtrai(); 
01AC:  MOVF   22,W
01AD:  SUBLW  02
01AE:  BTFSC  03.2
01AF:  GOTO   0CF
....................          if (dem==3) dich2phai(); 
01B0:  MOVF   22,W
01B1:  SUBLW  03
01B2:  BTFSC  03.2
01B3:  GOTO   0EE
....................          if (dem==4) dich2trai(); 
01B4:  MOVF   22,W
01B5:  SUBLW  04
01B6:  BTFSC  03.2
01B7:  GOTO   10D
....................          if (dem==5) tatdanphai(); 
01B8:  MOVF   22,W
01B9:  SUBLW  05
01BA:  BTFSC  03.2
01BB:  GOTO   12C
....................          if (dem==6) tatdantrai(); 
01BC:  MOVF   22,W
01BD:  SUBLW  06
01BE:  BTFSC  03.2
01BF:  GOTO   14B
01C0:  GOTO   1A9
....................        } 
....................     } 
01C1:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
