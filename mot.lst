CCS PCM C Compiler, Version 5.015, 5967               30-Jul-25 22:14

               Filename:   D:\VXL_code\mot.lst

               ROM used:   337 words (4%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           10 (3%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0FE
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #fuses intrc_io 
.................... #use delay (clock=8Mhz) 
0004:  MOVLW  24
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  02
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  97
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... #define up pin_e0 
.................... #define down pin_e1 
.................... unsigned int8 n, led; 
.................... signed int8 dem=1; 
....................  
.................... void nutnhan() 
....................     { 
....................        if (input(up)==0) 
0018:  BSF    03.5
0019:  BSF    09.0
001A:  BCF    03.5
001B:  BTFSC  09.0
001C:  GOTO   02E
....................          { 
....................           delay_ms(2); 
001D:  MOVLW  02
001E:  MOVWF  24
001F:  CALL   004
....................            if (input(up)==0) 
0020:  BSF    03.5
0021:  BSF    09.0
0022:  BCF    03.5
0023:  BTFSC  09.0
0024:  GOTO   02E
....................              { 
....................                dem++; 
0025:  INCF   22,F
....................                if (dem>6) dem=1; 
0026:  BTFSC  22.7
0027:  GOTO   02E
0028:  MOVF   22,W
0029:  SUBLW  06
002A:  BTFSC  03.0
002B:  GOTO   02E
002C:  MOVLW  01
002D:  MOVWF  22
....................              } 
....................          } 
....................           
....................          if (input(down)==0) 
002E:  BSF    03.5
002F:  BSF    09.1
0030:  BCF    03.5
0031:  BTFSC  09.1
0032:  GOTO   044
....................          { 
....................            delay_ms(2); 
0033:  MOVLW  02
0034:  MOVWF  24
0035:  CALL   004
....................            if (input(down)==0) 
0036:  BSF    03.5
0037:  BSF    09.1
0038:  BCF    03.5
0039:  BTFSC  09.1
003A:  GOTO   044
....................            { 
....................              dem--; 
003B:  DECF   22,F
....................              if (dem<1) dem=6; 
003C:  BTFSC  22.7
003D:  GOTO   042
003E:  MOVF   22,W
003F:  SUBLW  00
0040:  BTFSS  03.0
0041:  GOTO   044
0042:  MOVLW  06
0043:  MOVWF  22
....................            } 
....................          } 
0044:  RETURN
....................     } 
....................      
....................      
....................      
.................... void dichphai() 
....................     { 
....................        for (n=0; n<8; n++) 
0045:  CLRF   20
0046:  MOVF   20,W
0047:  SUBLW  07
0048:  BTFSS  03.0
0049:  GOTO   061
....................        { 
....................           led=0x80>>n; 
004A:  MOVLW  80
004B:  MOVWF  21
004C:  MOVF   20,W
004D:  MOVWF  78
004E:  BTFSC  03.2
004F:  GOTO   054
0050:  BCF    03.0
0051:  RRF    21,F
0052:  DECFSZ 78,F
0053:  GOTO   050
....................           output_c(led); 
0054:  MOVLW  00
0055:  MOVWF  23
0056:  BSF    03.5
0057:  CLRF   07
0058:  BCF    03.5
0059:  MOVF   21,W
005A:  MOVWF  07
....................           delay_ms(200); 
005B:  MOVLW  C8
005C:  MOVWF  24
005D:  CALL   004
....................           nutnhan(); 
005E:  CALL   018
005F:  INCF   20,F
0060:  GOTO   046
....................        } 
0061:  BCF    0A.3
0062:  BCF    0A.4
0063:  GOTO   13B (RETURN)
....................     } 
....................      
.................... void dichtrai() 
....................     {  
....................       for (n=0; n<8; n++) 
0064:  CLRF   20
0065:  MOVF   20,W
0066:  SUBLW  07
0067:  BTFSS  03.0
0068:  GOTO   080
....................       { 
....................         led=0x01<<n; 
0069:  MOVLW  01
006A:  MOVWF  21
006B:  MOVF   20,W
006C:  MOVWF  78
006D:  BTFSC  03.2
006E:  GOTO   073
006F:  BCF    03.0
0070:  RLF    21,F
0071:  DECFSZ 78,F
0072:  GOTO   06F
....................         output_c(led); 
0073:  MOVLW  00
0074:  MOVWF  23
0075:  BSF    03.5
0076:  CLRF   07
0077:  BCF    03.5
0078:  MOVF   21,W
0079:  MOVWF  07
....................         delay_ms(200); 
007A:  MOVLW  C8
007B:  MOVWF  24
007C:  CALL   004
....................         nutnhan(); 
007D:  CALL   018
007E:  INCF   20,F
007F:  GOTO   065
....................       } 
0080:  BCF    0A.3
0081:  BCF    0A.4
0082:  GOTO   13F (RETURN)
....................     } 
....................  
.................... void dich2phai() 
....................     { 
....................        for (n=0; n<8; n++) 
0083:  CLRF   20
0084:  MOVF   20,W
0085:  SUBLW  07
0086:  BTFSS  03.0
0087:  GOTO   09F
....................        { 
....................           led=0xC0>>n; 
0088:  MOVLW  C0
0089:  MOVWF  21
008A:  MOVF   20,W
008B:  MOVWF  78
008C:  BTFSC  03.2
008D:  GOTO   092
008E:  BCF    03.0
008F:  RRF    21,F
0090:  DECFSZ 78,F
0091:  GOTO   08E
....................           output_c(led); 
0092:  MOVLW  00
0093:  MOVWF  23
0094:  BSF    03.5
0095:  CLRF   07
0096:  BCF    03.5
0097:  MOVF   21,W
0098:  MOVWF  07
....................           delay_ms(200); 
0099:  MOVLW  C8
009A:  MOVWF  24
009B:  CALL   004
....................           nutnhan(); 
009C:  CALL   018
009D:  INCF   20,F
009E:  GOTO   084
....................        } 
009F:  BCF    0A.3
00A0:  BCF    0A.4
00A1:  GOTO   143 (RETURN)
....................     } 
....................      
.................... void dich2trai() 
....................     {  
....................       for (n=0; n<8; n++) 
00A2:  CLRF   20
00A3:  MOVF   20,W
00A4:  SUBLW  07
00A5:  BTFSS  03.0
00A6:  GOTO   0BE
....................       { 
....................         led=0x03<<n; 
00A7:  MOVLW  03
00A8:  MOVWF  21
00A9:  MOVF   20,W
00AA:  MOVWF  78
00AB:  BTFSC  03.2
00AC:  GOTO   0B1
00AD:  BCF    03.0
00AE:  RLF    21,F
00AF:  DECFSZ 78,F
00B0:  GOTO   0AD
....................         output_c(led); 
00B1:  MOVLW  00
00B2:  MOVWF  23
00B3:  BSF    03.5
00B4:  CLRF   07
00B5:  BCF    03.5
00B6:  MOVF   21,W
00B7:  MOVWF  07
....................         delay_ms(200); 
00B8:  MOVLW  C8
00B9:  MOVWF  24
00BA:  CALL   004
....................         nutnhan(); 
00BB:  CALL   018
00BC:  INCF   20,F
00BD:  GOTO   0A3
....................       } 
00BE:  BCF    0A.3
00BF:  BCF    0A.4
00C0:  GOTO   147 (RETURN)
....................     } 
....................  
.................... void sangdanphai() 
....................    { 
....................       for (n=0; n<8; n++) 
00C1:  CLRF   20
00C2:  MOVF   20,W
00C3:  SUBLW  07
00C4:  BTFSS  03.0
00C5:  GOTO   0DD
....................          { 
....................            led=0xff>>n; 
00C6:  MOVLW  FF
00C7:  MOVWF  21
00C8:  MOVF   20,W
00C9:  MOVWF  78
00CA:  BTFSC  03.2
00CB:  GOTO   0D0
00CC:  BCF    03.0
00CD:  RRF    21,F
00CE:  DECFSZ 78,F
00CF:  GOTO   0CC
....................            output_c(led); 
00D0:  MOVLW  00
00D1:  MOVWF  23
00D2:  BSF    03.5
00D3:  CLRF   07
00D4:  BCF    03.5
00D5:  MOVF   21,W
00D6:  MOVWF  07
....................            delay_ms(200); 
00D7:  MOVLW  C8
00D8:  MOVWF  24
00D9:  CALL   004
....................            nutnhan(); 
00DA:  CALL   018
00DB:  INCF   20,F
00DC:  GOTO   0C2
....................          } 
00DD:  BCF    0A.3
00DE:  BCF    0A.4
00DF:  GOTO   14B (RETURN)
....................    } 
....................     
.................... void sangdantrai() 
....................    { 
....................       for (n=0; n<8; n++) 
00E0:  CLRF   20
00E1:  MOVF   20,W
00E2:  SUBLW  07
00E3:  BTFSS  03.0
00E4:  GOTO   0FB
....................          { 
....................            led=~0xff<<n; 
00E5:  CLRF   21
00E6:  MOVF   20,W
00E7:  MOVWF  78
00E8:  BTFSC  03.2
00E9:  GOTO   0EE
00EA:  BCF    03.0
00EB:  RLF    21,F
00EC:  DECFSZ 78,F
00ED:  GOTO   0EA
....................            output_c(led); 
00EE:  MOVLW  00
00EF:  MOVWF  23
00F0:  BSF    03.5
00F1:  CLRF   07
00F2:  BCF    03.5
00F3:  MOVF   21,W
00F4:  MOVWF  07
....................            delay_ms(200); 
00F5:  MOVLW  C8
00F6:  MOVWF  24
00F7:  CALL   004
....................            nutnhan(); 
00F8:  CALL   018
00F9:  INCF   20,F
00FA:  GOTO   0E1
....................          } 
00FB:  BCF    0A.3
00FC:  BCF    0A.4
00FD:  GOTO   14F (RETURN)
....................    } 
....................  
....................  
.................... void main () 
00FE:  MOVF   03,W
00FF:  ANDLW  1F
0100:  MOVWF  03
0101:  MOVLW  71
0102:  BSF    03.5
0103:  MOVWF  0F
0104:  MOVF   0F,W
0105:  MOVLW  01
0106:  BCF    03.5
0107:  MOVWF  22
0108:  MOVLW  FF
0109:  MOVWF  23
010A:  BSF    03.5
010B:  BSF    03.6
010C:  MOVF   09,W
010D:  ANDLW  C0
010E:  MOVWF  09
010F:  BCF    03.6
0110:  BCF    1F.4
0111:  BCF    1F.5
0112:  MOVLW  00
0113:  BSF    03.6
0114:  MOVWF  08
0115:  BCF    03.5
0116:  CLRF   07
0117:  CLRF   08
0118:  CLRF   09
0119:  BCF    03.7
....................     { 
....................        set_tris_c(0); 
011A:  MOVLW  00
011B:  BSF    03.5
011C:  BCF    03.6
011D:  MOVWF  07
011E:  BCF    03.5
011F:  MOVWF  23
....................        set_tris_e(0xff); 
0120:  BSF    03.5
0121:  BSF    09.0
0122:  BSF    09.1
0123:  BSF    09.2
0124:  BSF    09.3
....................        output_c(0); 
0125:  BCF    03.5
0126:  MOVWF  23
0127:  BSF    03.5
0128:  CLRF   07
0129:  BCF    03.5
012A:  CLRF   07
....................        delay_ms(200); 
012B:  MOVLW  C8
012C:  MOVWF  24
012D:  CALL   004
....................        output_c(0xff); 
012E:  MOVLW  00
012F:  MOVWF  23
0130:  BSF    03.5
0131:  CLRF   07
0132:  MOVLW  FF
0133:  BCF    03.5
0134:  MOVWF  07
....................        delay_ms(200); 
0135:  MOVLW  C8
0136:  MOVWF  24
0137:  CALL   004
....................         
....................         
....................        while (true) 
....................        { 
....................          if (dem==1) dichphai(); 
0138:  DECFSZ 22,W
0139:  GOTO   13B
013A:  GOTO   045
....................          if (dem==2) dichtrai(); 
013B:  MOVF   22,W
013C:  SUBLW  02
013D:  BTFSC  03.2
013E:  GOTO   064
....................          if (dem==3) dich2phai(); 
013F:  MOVF   22,W
0140:  SUBLW  03
0141:  BTFSC  03.2
0142:  GOTO   083
....................          if (dem==4) dich2trai(); 
0143:  MOVF   22,W
0144:  SUBLW  04
0145:  BTFSC  03.2
0146:  GOTO   0A2
....................          if (dem==5) sangdanphai(); 
0147:  MOVF   22,W
0148:  SUBLW  05
0149:  BTFSC  03.2
014A:  GOTO   0C1
....................          if (dem==6) sangdantrai(); 
014B:  MOVF   22,W
014C:  SUBLW  06
014D:  BTFSC  03.2
014E:  GOTO   0E0
014F:  GOTO   138
....................        } 
....................     } 
0150:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
